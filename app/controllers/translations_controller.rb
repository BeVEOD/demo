# -*- encoding : utf-8 -*-
################################################
## This file and all its content belong to Faveod S.A.S unless a commercial
## contract signed by a representant of Faveod S.A.S states otherwise.
##########
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################
## This has been generated by Faveod Generator on Sun Apr 28 21:54:22 +0200 2013
## It should be placed at 'app/controllers/translations_controller.rb'
## All manual modifications will be destroyed on next generation
################################################


class TranslationsController < ApplicationController
  layout 'translations'

  before_filter(:faveod_cookies_loading)

  before_filter(:only => :index) do
    request.request_method_symbol == :get
  end
  before_filter(:only => :update) do
    request.request_method_symbol == :put
  end
  before_filter(:only => :destroy) do
    request.request_method_symbol == :delete
  end
  before_filter(:only => :get_po) do
    request.request_method_symbol == :get
  end
  before_filter(:only => :generation_status) do
    request.request_method_symbol == :get
  end
  before_filter(:only => :generate_pos) do
    request.request_method_symbol == :post
  end
  before_filter(:only => :delete_po) do
    request.request_method_symbol == :delete
  end

  before_filter(:responder, :only => [:index])

  # Author:: Nicolas Couturier
  # Version:: 5
  # Last Update:: 2013-02-01 11:50:02 UTC
  # Status:: In Progress


  def index

    filter = params[:filter] || "locales"
    limit  = params[:limit].to_i || 25
    page   = params[:page].to_i || 1
    @locales = case filter
    when "locales"
      locales = Dir.entries("#{Rails.root}/po").select do |entry|
        File.directory?(File.join(Rails.root, "po", entry)) and !(entry =='.' || entry == '..')
      end
    when "locale"
      locales = GetPomo::PoFile.parse(File.read("#{Rails.root}/po/#{params[:locale]}/#{APP_SID}.po"))
      locales.reject!{|l| l.msgid == ""}
      if params.has_key?(:fuzzy) and (params[:fuzzy] =~ /(t|1|true|on|f|0|false|off)/i)
        fuzzy = (params[:fuzzy] =~ /(t|1|true|on)/i) ? true : false
        if fuzzy
          locales.reject{|l| l.fuzzy?.nil?}[((page - 1) * limit + (page - 1))..(((page - 1) * limit) + limit + (page - 1))]
        else
          locales.select{|l| l.fuzzy?.nil?}[((page - 1) * limit + (page - 1))..(((page - 1) * limit) + limit + (page - 1))]
        end
      else
        locales[((page - 1) * limit + (page - 1))..(((page - 1) * limit) + limit + (page - 1))]
      end
    else nil
    end
    respond_with @locales
  end


  # Author:: Nicolas Couturier
  # Version:: 2
  # Last Update:: 2013-02-01 11:50:32 UTC
  # Status:: In Progress


  def update

    data    = params.except(:action, :controller, :options)
    options = params[:options]
    translations = GetPomo::PoFile.parse(File.read("#{Rails.root}/po/#{options["locale"]}/#{APP_SID}.po"))

    # Find translation

    @locale = translations.find { |t| t.comment == data["comment"] }
    index   = translations.find_index(@locale)

    # Edit translation

    @locale.msgid   = data["msgid"]
    @locale.msgstr  = data["msgstr"]
    @locale.comment = data["comment"]
    if data.has_key?("fuzzy") and data["fuzzy"] == "on"
      @locale.comment += ", fuzzy\n" if @locale.fuzzy?.nil?
    else
      @locale.comment.slice! ", fuzzy\n" unless @locale.fuzzy?.nil?
    end

    # Replace translation

    translations[index] = @locale

    # Create delayed job to rewrite the PO file asynchronously

    Delayed::Job.enqueue WritePo.new(options["locale"], GetPomo::PoFile.to_text(translations))
    render :json => @locale
  end


  # Author:: Nicolas Couturier
  # Version:: 2
  # Last Update:: 2013-02-01 11:51:10 UTC
  # Status:: In Progress


  def destroy

    translations = GetPomo::PoFile.parse(File.read("#{Rails.root}/po/#{params[:locale]}/#{APP_SID}.po"))
    locales = lambda do |translations|
      translations.reject!{|t| t.msgid == ""}
      if params.has_key?(:fuzzy) and (params[:fuzzy] =~ /(t|1|true|on)/i)
        fuzzy = (params[:fuzzy] =~ /(t|1|true|on)/i) ? true : false
        if fuzzy
          translations.reject{|t| t.fuzzy?.nil?}
        else
          translations.select{|t| t.fuzzy?.nil?}
        end
      else
        translations
      end
    end.call(translations)

    # Find and delete translation

    index = translations.find_index(locales[params[:id].to_i])
    @locale = translations.delete_at(index)

    # Create delayed job to rewrite the PO file asynchronously

    Delayed::Job.enqueue WritePo.new(params[:locale], GetPomo::PoFile.to_text(translations))
    render :json => @locale
  end


  # Author:: Nicolas Couturier
  # Version:: 2
  # Last Update:: 2013-02-01 11:54:59 UTC
  # Status:: In Progress


  def get_po

    send_file("#{Rails.root}/po/#{params[:locale]}/#{APP_SID}.po",
    :filename => "#{APP_SID}.po",
    :type => "text/x-gettext-translation")
  end


  # Author:: Nicolas Couturier
  # Version:: 1
  # Last Update:: 2013-02-01 11:55:24 UTC
  # Status:: In Progress


  def generation_status


    # Check if there is a POs generation currently queued

    result = ActiveRecord::Base.connection.execute("SELECT dj.* FROM delayed_jobs dj WHERE dj.queue = 'pos_generation'")
    if result.nil? or result.num_rows == 0
      render :json => { "message" => "POs aren't being generated at the moment." }
    else
      render :json => { "message" => "POs are being generated please be patient, translations will be available soon." }, :status => :forbidden
    end
  end


  # Author:: Nicolas Couturier
  # Version:: 2
  # Last Update:: 2013-03-27 16:32:37 UTC
  # Status:: In Progress


  def generate_pos


    # Avoid duplicating POs generation

    result = ActiveRecord::Base.connection.execute("SELECT dj.* FROM delayed_jobs dj WHERE dj.queue = 'pos_generation'")
    return render :json => { "queued" => false, "message" => "POs are being generated please be patient, translations will be available soon." }, :status => :forbidden unless result.nil? or result.count == 0

    # Request POs generation in DelayedJob

    Delayed::Job.enqueue(DelayedRake.new("updatepo"), :queue => "pos_generation")
    render :json => { "queued" => true, "message" => "POs are being generated please be patient, translations will be available soon." }
  end


  # Author:: Nicolas Couturier
  # Version:: 1
  # Last Update:: 2013-02-01 11:56:46 UTC
  # Status:: In Progress


  def delete_po

    FileUtils.rm_rf "#{Rails.root}/po/#{params[:locale]}"
    redirect_to locales_path
  end


  # Author:: Nicolas Couturier
  # Version:: 1
  # Last Update:: 2013-03-25 15:52:21 UTC
  # Status:: In Progress


  def upload_po

    @locales = Dir.entries("#{Rails.root}/po").select do |entry|
      File.directory?(File.join(Rails.root, "po", entry)) and !(entry =='.' || entry == '..')
    end
    if request.post?
      @errors = {}
      @errors[:locale] = "You must provide a valid locale." unless @locales.include?(params[:locale])
      if params[:locale_file].nil?
        @errors[:locale_file] = "You must provide a PO file."
      else
        begin
          GetPomo::PoFile.parse(File.read(params[:locale_file].tempfile))
        rescue
          @errors[:locale_file] = "You must provide a valid PO file."
        end
      end

      # All good move file to the appropriate location and redirect

      if @errors.empty?
        FileUtils.mv(params[:locale_file].tempfile, Rails.root.join('po', params[:locale], "#{Rails.application.class.to_s.split('::').first.downcase}.po"))
        redirect_to locales_path
      end
    end
  end
  protected


  # Author:: Nicolas Couturier
  # Version:: 2
  # Last Update:: 2012-12-03 15:23:32 UTC
  # Status:: In Progress


  def responder
    self.class.respond_to :html, :json
  end
  private


  def faveod_cookies_loading
    @pres_mode = cookies["#{APP_SID}_translations_pres_mode"].to_sym unless cookies["#{APP_SID}_translations_pres_mode"].blank?
    @pres_mode = params["#{APP_SID}_translations_pres_mode"].to_sym unless params["#{APP_SID}_translations_pres_mode"].blank?
  end

end
