# encoding: utf-8
################################################
## This file and all its content belong to Faveod S.A.S unless a commercial
## contract signed by a representant of Faveod S.A.S states otherwise.
##########
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################
## This has been generated by Faveod Generator on Thu Oct 31 16:38:01 +0100 2013
## It should be placed at 'app/controllers/app_locales_controller.rb'
## All manual modifications will be destroyed on next generation
################################################


class AppLocalesController < ApplicationController
  layout 'application'

  before_filter(:faveod_cookies_loading)

  before_filter(:only => :list) do
    request.request_method_symbol == :get
  end
  before_filter(:only => :create) do
    request.request_method_symbol == :post
  end
  before_filter(:only => :update) do
    request.request_method_symbol == :put
  end

  around_filter(:data_context_filter_1, :only => [:index, :list, :task_board])

  # Retrieve the thumbnail of a file (icon or image).
  #
  # Author:: Yann Azoury
  # Version:: 14
  # Last Update:: 2013-02-04 15:20:42 UTC
  # Status:: Requires Tests


  def get_file_thumb

    @app_locale = AppLocale.find_by_id(params[:id])
    filename = nil
    document = nil
    mime	 = nil
    case params[:sid].to_s
    when "po"
      filename   = @app_locale.po__thumb_path
      filename ||= @app_locale.po__name
      document   = @app_locale.po
    end
    if filename
      mime = MIME::Types.type_for(filename)
      file_type = mime.first ? mime.first.content_type : 'application/octet-stream'
      disposition	= 'inline' if mime.first && ['text', 'image'].include?(mime.first.media_type)
      disposition ||= 'attachment'
      extension = filename.split('.').last
      if mime.first.nil? || mime.first.media_type != 'image'
        icon = Rails.root.join('public', 'images', 'file_icons', "#{extension}.png").to_s
        icon = Rails.root.join('public', 'images', 'file_icons', "defaut.png").to_s unless File.exist?(icon)

        # sends thumbnail file

        send_data(File.open(icon).read, :filename => File.basename(icon), :type => 'image/png', :disposition => 'inline')
        return
      end
      if document && AppLocale.columns.find{|e| e.name == params[:sid]}

        # sends thumbnail blob in the database

        send_data(@app_locale.thumbnail(params[:sid]), :filename => filename, :type => file_type, :disposition => 'inline')
      else

        # makes thumbnail and send

        thmb = @app_locale.thumbnail(params[:sid])
        if thmb
          send_data(thmb, :filename => filename, :type => file_type, :disposition => 'inline')
        else
          render :nothing => true
        end
      end
    else
      render :nothing => true
    end
  end


  # File management: gets files' size.
  #
  # Author:: Sylvain Abélard
  # Version:: 4
  # Last Update:: 2010-06-16 12:23:12 UTC
  # Status:: Requires Tests


  def get_file_size

    size	  = nil
    filename = nil
    document = nil
    @app_locale = AppLocale.find_by_id(params[:id])
    case params[:sid].to_s
    when "po"
      filename	= @app_locale.po__path
      document	= @app_locale.po
    end
    if AppLocale.columns.find{|e| e.name == params[:sid]} # binary in db
      size = document.blank? ? 0 : document.length
    else
      size = filename.blank? ? 0 : File.size(filename)
    end
    render :text => size.to_s
  end


  # Load the entire file.
  #
  # Author:: Yann Azoury
  # Version:: 8
  # Last Update:: 2012-09-11 00:06:47 UTC
  # Status:: Requires Tests


  def get_file

    @app_locale = AppLocale.find_by_id(params[:id])
    filename = nil
    filepath = nil
    document = nil
    case params[:sid].to_s
    when "po"
      filename = @app_locale.po__name
      filepath = @app_locale.po__path
      document = @app_locale.po
    end
    if document && File.exist?(filepath)
      mime = MIME::Types.type_for(filename)
      file_type	= mime.first ? mime.first.content_type : 'application/octet-stream'
      disposition	= 'inline' if mime.first && ['text', 'image'].include?(mime.first.media_type)
      disposition ||= 'attachment'
      send_data(document, :filename => filename, :type => file_type, :disposition => disposition)
    else
      render :nothing => true
    end
  end


  # This gives the list of all records
  #
  # Author:: Yann Azoury
  # Version:: 24
  # Last Update:: 2013-01-29 17:02:44 UTC
  # Status:: Validation Pending


  def list

    @restricted_fields = []
    pagin_opts = {:include => []}
    pagin_opts[:page]	  = params[:page].to_i > 0 ? params[:page].to_i : 1
    pagin_opts[:per_page]	  = (params[:per_page] || cookies[:app_locales_per_page] || 50).to_i
    pagin_opts[:order]	  = @default_order if @default_order
    pagin_opts[:order]	||= 'app_locales.' +params[:sort_by] if !params[:sort_by].blank?
    pagin_opts[:conditions] ||= @default_filter if @default_filter
    pagin_opts[:conditions] ||= params[:conditions] if params[:conditions].is_a?(Hash)
    pagin_opts[:joins]	||= @joins_fields || []

    @app_locales = AppLocale.paginate(pagin_opts)
    render(:xml => @app_locales.to_xml(:dasherize => false, :only => [:id,:locale_code,:po__name,:updated_at])) and return if params[:format] == 'xml'
    render(:json => @app_locales) and return if params[:format] == 'json'
    render(:pdf => @app_locales, :action => :list) and return if params[:format] == 'pdf'
    if !params[:group_by].blank? && ["locale_code", "updated_at"].include?(params[:group_by])
      @app_locales_groups = @app_locales.inject({}) { |acc,elt|
        crit = nil
        if [].include?(params[:group_by])
          crit = elt.send(params[:group_by]) ? elt.send(params[:group_by]).disp_name : nil
        else
          crit = elt.attributes[params[:group_by]]
        end
        acc[crit] ||= []
        acc[crit] << elt
        acc
      }
    end
  end


  # Loads a new record.
  #
  # Author:: Yann Azoury
  # Version:: 2
  # Last Update:: 2012-03-25 18:26:30 UTC
  # Status:: Validation Pending


  def new

    @app_locale_attributes = params[:app_locale] ? params[:app_locale]['0'].clone : {}

    @app_locale = AppLocale.load_from_params(@app_locale_attributes)

    render(:layout => !request.xhr?)
  end


  # Inserts the record in the database.
  #
  # Author:: Yann Azoury
  # Version:: 23
  # Last Update:: 2013-10-31 16:38:41 UTC
  # Status:: Validation Pending


  def create

    redirect_to(:action => :index) and return unless request.post?
    redirect_to(:action => :index) and return if params[:app_locale].blank? || !params[:app_locale].is_a?(Hash)
    @app_locale_attributes = params[:app_locale] ? params[:app_locale]['0'].clone : {}

    @app_locale = AppLocale.load_from_params(@app_locale_attributes)
    if @app_locale.errors.empty? && @app_locale.save
      flash[:notice] = _("%{page} was successfully created.") % {:page => _("App Locale")}
      if request.xhr? # && params[:format] == 'json'
        render(:json => {:id => @app_locale.id}.merge(@app_locale.attributes).to_json)
        return
      end
    else
      if request.xhr? # && params[:format] == 'json'
        render(:json => ({:errors => @app_locale.errors.full_messages}.merge(@app_locale.attributes)).to_json)
      else
        render(:action => :new)
      end
      return
    end
    if params[:go_to].blank?
      redirect_to :action => (params[:commit_and_new] ? :new : :index)
    else
      redirect_to(params[:go_to])
    end
  end


  # Display the record.
  #
  # Author:: Yann Azoury
  # Version:: 14
  # Last Update:: 2012-03-26 04:12:53 UTC
  # Status:: Validation Pending


  def show

    @app_locale_attributes = params[:app_locale] ? params[:app_locale][params[:id]].clone : {}
    @app_locale_attributes.merge!(:id => params[:id]) if @app_locale_attributes

    @app_locale = AppLocale.load_from_params(@app_locale_attributes)
    if @app_locale.nil?
      flash[:warning] ||= []
      flash[:warning] << _("Warning: %{obj} with ID %{id} does not exist!") % {:obj => 'app_locale', :id => params[:id]}
      redirect_to(:action => :index)
      return
    end

    respond_to do |format|
      format.html {
      render :layout => !request.xhr? }
      format.pdf {
      render :layout => false }
      format.xml {
      render :xml => @app_locale.to_xml }
      format.json {
      render :json => @app_locale.to_json }
    end
  end


  # Updates the current row in database from the sent form.
  #
  # Author:: Sylvain Abélard
  # Version:: 14
  # Last Update:: 2012-12-13 11:53:56 UTC
  # Status:: Validation Pending


  def update

    redirect_to(:action => :index) and return unless request.put?
    redirect_to(:action => :index) and return if params[:app_locale].blank? || !params[:app_locale].is_a?(Hash)
    @app_locale_attributes = params[:app_locale] ? params[:app_locale][params[:id]].clone : {}
    @app_locale_attributes.merge!(:id => params[:id]) if @app_locale_attributes

    @app_locale = AppLocale.load_from_params(@app_locale_attributes)
    if @app_locale.nil?
      flash[:warning] ||= []
      flash[:warning] << _("Warning: %{obj} with ID %{id} does not exist!") % {:obj => 'app_locale', :id => params[:id]}
      redirect_to(:action => :index)
      return
    end
    if @app_locale.save
      flash[:notice] = _("%{page} was successfully updated.") % {:page => _("App Locale")}
    else
      if request.xhr?
        render(:json => {:errors =>
        @app_locale.errors.full_messages})
      else
        render(:action => :edit, :id => @app_locale.id)
      end
      return
    end
    render(:json => "OK") and return if request.xhr?
    if params[:app_locale].length == 1 # single edit
      redirect_to :action => :show, :id => @app_locale.id
    else
      redirect_to :action => :index
    end
  end


  # Deletes an object or list of objects from the database.
  #
  # Author:: Yann Azoury
  # Version:: 9
  # Last Update:: 2011-03-08 15:34:31 UTC
  # Status:: Validation Pending


  def destroy

    if params[:id].is_a?(Array)
      @success = AppLocale.destroy(params[:id])
    else
      @app_locale = AppLocale.find_by_id(params[:id])
      @app_locale.destroy unless @app_locale.nil?
      @success = @app_locale && @app_locale.destroyed?
    end
    if @success
      flash[:notice] = _("%{model} %{name} successfully deleted.") % {:model => _("App Locale"), :name => @app_locale.disp_name}
    else
      flash[:warning] = _("%{model} %{name} could not be deleted.") % {:model => _("App Locale"), :name => params[:name]}
    end
    if params[:format] != "json"
      if request.xhr?
        render :action => 'ajax_update', :layout => false
      else
        if params[:go_to].blank?
          redirect_to :action => :index
        else
          redirect_to(params[:go_to])
        end
      end
    else
      resp = {}
      if @success
        resp[:success] = true
      else
        resp[:success] = false
        resp[:error] = flash[:warning]
      end
      render :json => resp.to_json, :layout => false
    end
  end


  # Exports RSS, XML and ATOM feeds.
  #
  # Author:: Sylvain Abélard
  # Version:: 6
  # Last Update:: 2010-06-16 12:11:11 UTC
  # Status:: Validation Pending


  def feed

    @app_locales = AppLocale.all(:limit => 50)
    respond_to do |format|
      format.rss {render :template => 'app_locales/rss', :layout => false}
      format.xml {render :template => 'app_locales/rss', :layout => false}
      format.html {render :template => 'app_locales/rss', :layout => false}
      format.atom {render :template => 'app_locales/atom', :layout => false}
    end
  end


  # Gives help about current module.
  #
  # Author:: Yann Azoury
  # Version:: 17
  # Last Update:: 2012-05-19 23:29:44 UTC
  # Status:: Validation Pending


  def help

    @user_actions = Access.where(:table_sid => "app_locales", :action_sid => ["list", "new", "create", "show", "update", "destroy", "feed", "help", "update_po", "po_files", "get_po_file", "translate_deprecated", "index", "edit", "make_mo", "auto_translate_all", "submit", "auto_translate"]).includes([:user_accesses, :profile_accesses]).reject{|a| @current_user.can_run?(a) }
    render(:layout => !request.xhr?)
  end


  # Translations: updating PO files.
  #
  # Author:: Sylvain Abélard
  # Version:: 9
  # Last Update:: 2010-06-16 12:29:20 UTC
  # Status:: Requires Tests


  def update_po

    res = AppLocale.start(:update_po) unless AppLocale.working?
    if res.nil?
      flash[:error] = _("Cannot launch tasks!") + ': ' +
      _("%{task} running in background") % {:task => _("Translator")}
    else
      flash[:notice] = _("%{task} running in background") % {:task => "'Update PO'"}
    end
    redirect_to(:action => :index) and return
  end


  # Translations: listing PO files.
  #
  # Author:: Yann Azoury
  # Version:: 4
  # Last Update:: 2012-04-22 01:51:20 UTC
  # Status:: Validation Pending


  def po_files

    @po_files = {}
    AppLocale.app_locales.each { |l|
      @po_files[l] = APP_SID + '.po' if File.exist?(Rails.root.join('po', l, APP_SID + '.po'))
    }
  end


  # Translations: downloading PO file.
  #
  # Author:: Yann Azoury
  # Version:: 4
  # Last Update:: 2012-04-22 01:51:48 UTC
  # Status:: Validation Pending


  def get_po_file

    if AppLocale.app_locales.include?(params[:id])
      path = Rails.root.join('po', params[:id], APP_SID + '.po')
      send_data File.open(path, 'r').read, :filename => "#{APP_SID}_#{params[:id]}.po", :disposition => 'attachment'
    else
      render :nothing => true
    end
  end


  # WARNING: DEPRECATED!
  # Translations: threaded auto-translation using Google Services.
  #
  #--
  # DEPRECATED: this action would be removed
  #++
  # Author:: Yann Azoury
  # Version:: 5
  # Last Update:: 2012-04-22 01:53:27 UTC
  # Status:: Validated


  def translate_deprecated

    render :nothing => true and return unless request.xhr?
    require 'open-uri'
    require 'hpricot'
    Thread.start {
      Thread.current[:task] = 'updatepo'
      Thread.current[:start_time] = Time.now
      google_en_dest = ['ar', 'zh-CN', 'zh-TW', 'fr', 'de', 'it', 'ja', 'ko', 'pt', 'ru', 'es']
      uri = URI.parse("http://translate.google.com/translate_t")
      logger.debug("Thread launched for #{AppLocale.app_locales.inspect}")
      AppLocale.app_locales.select{|loc| google_en_dest.include?(loc) }.each{ |loc|
        path = Rails.root.join('po', loc, APP_SID + '.po')
        logger.info("Beginning Auto-Translation for #{loc} (#{path})")
        @todo = {}; pmsgid = nil

        ## GET ALL MSGIDS TO TRANSLATE IN @todo

        @todo = get_empty_msgstr(path)
        logger.debug("MSGSTR TO TRANSLATE for #{loc}: #{@todo.size}")

        ## TRANSLATE ALL MSGIDS
        #	logger.debug("MSGID to Translate: #{@todo.keys}")

        msgids = @todo.keys.each{ |mi|

          #mi = @todo.keys.join("[````]")

          logger.debug("Working on: #{mi}")
          uri.query = URI.encode("langpair=en|#{loc}&text=#{mi}")
          doc = uri.open { |f| Hpricot(f) }
          texts = (doc/"#result_box").inner_text.split("[````]")
          raise "Google can't translate more" if texts.empty?
          if texts.size == @todo.keys.size
            @todo.keys.each_with_index{|k,i| @todo[k] = texts[i]}
          end
          logger.info("TRANSLATION (#{loc}): #{mi} -> #{texts.inspect}")
        }
      }
    } if Thread.list.select{|t| t[:task] == 'updatepo' }.empty?
    render :nothing => true
  end


  # Translations: main screen (listing PO files and translations).
  #
  # Author:: Yann Azoury
  # Version:: 9
  # Last Update:: 2012-04-22 01:51:37 UTC
  # Status:: Validation Pending


  def index

    list
    po_files
    @menu_lg = Dir[Rails.root.join('po', '*', '*.po')].map{|f|
    f.tr("\\", '/').split('/')[-2] }
  end


  # Translations: updating translations.
  # * single or batch editing
  # * manual or automatically-retrieved content
  #
  # Author:: Sylvain Abélard
  # Version:: 5
  # Last Update:: 2010-06-16 12:36:46 UTC
  # Status:: Validation Pending


  def edit

    @app_locale = AppLocale.find_by_id(params[:id]) || AppLocale.find_by_locale_code(params[:id])
    if @app_locale.nil?
      flash[:warning] = _("Warning: %{obj} with ID %{id} does not exist!" ) % {:obj => 'app_locale', :id => params[:id]}
      redirect_to(:action => :list)
      return
    end

    @filter = params[:filters] && !params[:filters][:msgid].blank? ? params[:filters][:msgid] : nil
    params.delete(:filters) if params[:filters] && params[:filters][:msgid].blank?
    case params[:tab]
    when "trans"
      @gettext_trans = true
    when "untrans"
      @gettext_untrans = true
    when "obsol"
      @gettext_obsol = true
    when "fuzzy"
      @gettext_fuzzy = true
    else
      @gettext_fuzzy = true
    end
    @lang_file = @app_locale.locale_code
    if @gettext_obsol && params[:per_page] == "-1" && params[:page] == "-1"
      @app_locale.delete_obsol
      params[:per_page] = "50"
      params[:page] = "1"
    end
    tab = (params[:tab] || "fuzzy")
    res = @app_locale.gettext_fct_from_yml(tab, params)
    @translation = res[:translation]
    @md5 = res[:md5]
    @nb_trans = (params[:per_page] || 50).to_i
    @current_page = pages = (params[:page] || 1).to_i
    @nb_trans = 50 if @nb_trans < 1
    @current_page = 1 if @current_page < 1
    @total_trans = 0
    @app_locales = {}
    if @translation
      @translation.keys.sort.each do |f|
        if @translation[f]
          @app_locales[f] = @translation[f].sort.paginate(:page => @current_page , :per_page => @nb_trans)
          @total_trans += @translation[f].length
        end
      end
    end
    filter = params[:filters] && params[:filters][:msgid] ? Regexp.new(params[:filters][:msgid]) : nil
    @count_fuzzy   = @app_locale.count_total_element("fuzzy",   filter)
    @count_trans   = @app_locale.count_total_element("trans",   filter)
    @count_obsol   = @app_locale.count_total_element("obsol",   filter)
    @count_untrans = @app_locale.count_total_element("untrans", filter)
    render :layout => !request.xhr?
  end


  # Translations: publishing changes.
  #
  # Author:: Sylvain Abélard
  # Version:: 6
  # Last Update:: 2010-06-16 14:04:38 UTC
  # Status:: Requires Tests


  def make_mo

    res = AppLocale.start(:make_mo) unless AppLocale.working?
    if res.nil?
      flash[:error] = _("Cannot launch tasks!") + ': ' +
      _("%{task} running in background") % {:task => _("Translator")}
    else
      flash[:notice] = _("%{task} running in background") % {:task => "'Make MO'"}
    end
    redirect_to(:action => :index) and return
  end


  # Translations: auto-translate all remaining parts.
  #
  # Author:: Sylvain Abélard
  # Version:: 4
  # Last Update:: 2010-06-16 14:05:08 UTC
  # Status:: Requires Tests


  def auto_translate_all

    res = AppLocale.start(:auto_translate) unless AppLocale.working?
    if res.nil?
      flash[:error] = _("Cannot launch tasks!") + ': ' +
      _("%{task} running in background") % {:task => _("Translator")}
    else
      flash[:notice] = _("%{task} running in background") % {:task => _("Automatic Translator")}
    end
    redirect_to(:action => :index) and return
  end


  # Translations: submit translations batch.
  #
  # Author:: Yann Azoury
  # Version:: 6
  # Last Update:: 2012-04-22 01:54:06 UTC
  # Status:: Should be optimized


  def submit

    @app_locale = AppLocale.find_by_id(params[:id]) || AppLocale.find_by_locale_code(params[:id])
    if !AppLocale.working? && params[:tab] == "untrans"
      @lang_file = @app_locale.locale_code
      msgid = {}
      if params[:msgid]
        @translation = {}
        params[:msgid].each do |f, fdata|
          file = Base64.decode64(f.gsub(/!/,'=') + "\n")
          msgid[file] = {}
          fdata.each do |l, ldata|
            mmsgid = Base64.decode64(l.gsub(/!/,'=') + "\n").gsub(/\r/,'')
            msgid[file][mmsgid] = ldata["0"].gsub(/\r/,'')
            i = 1
            while ldata["#{i}"]
              msgid[file][mmsgid] += "\000" + ldata["#{i}"].gsub(/\r/,'')
              i += 1
            end
          end
          my_file = Rails.root.join('po', @lang_file, file)
          @translation[file] = YAML.load(File.open(my_file, 'r'))
          msgid[file].each do |mmsgid, msgstr|
            @translation[file].delete(mmsgid)
          end
          File.open(my_file, "w+") do |f|
            YAML.dump(@translation[file].inject({}) {|acc,v| acc[v[0]] = v[1] ; acc}, f)
          end
          my_file = my_file.gsub(/_fuzzy.yml/, "_trans.yml").gsub(/_untrans.yml/, "_trans.yml").gsub(/_obsol.yml/, "_trans.yml")
          @translation[file] = YAML.load(File.open(my_file, 'r'))
          msgid[file].each do |mmsgid, msgstr|
            @translation[file][mmsgid] = msgstr
          end
          File.open(my_file, "w+") do |f|
            YAML.dump(@translation[file].inject({}) {|acc,v| acc[v[0]] = v[1] ; acc}, f)
          end
        end
      end
    end
    if @translation
      flash[:notice] = _("%{page} was successfully updated.") % {:page => _("App Locale")}
    else
      flash[:error]  = _("Cannot launch task!") + ': ' +
      _("%{task} running in background") % {:task => _("Translator")}
    end
    redirect_to :action => :index unless request.xhr?
  end


  # Translations: auto-translation AJAX call.
  #
  # Author:: Sylvain Abélard
  # Version:: 3
  # Last Update:: 2010-06-16 14:09:26 UTC
  # Status:: Should be optimized


  def auto_translate

    @res ||= ""
    @app_locale = AppLocale.find_by_id(params[:id]) || AppLocale.find_by_locale_code(params[:id])
    if !AppLocale.working? && !@app_locale
      @lang_file = @app_locale.locale_code
      msgid = {}
      if params[:msgid]
        @translation = {}
        params[:msgid].each do |f, fdata|
          file = Base64.decode64(f.gsub(/!/,'=') + "\n")
          msgid[file] = {}
          fdata.each do |l, ldata|
            mmsgid = Base64.decode64(l.gsub(/!/,'=') + "\n").gsub(/\r/,'')
            msgid[file][mmsgid] = ldata["0"].gsub(/\r/,'')
            i = 1
            while ldata["#{i}"]
              msgid[file][mmsgid] += "\000" + ldata["#{i}"].gsub(/\r/,'')
              i += 1
            end
          end
          msgid[file].each do |mmsgid, msgstr|
            @res = AppLocale.get_translation(mmsgid, @lang_file)
          end
        end
      end
    end
    redirect_to :action => :index unless request.xhr?
  end
  protected


  # Translations: findind untranslated strings.
  #
  # Author:: Yann Azoury
  # Version:: 5
  # Last Update:: 2013-02-27 11:09:13 UTC
  # Status:: Validation Pending


  def get_empty_msgstr(path)
    todo = {}
    pmsgid = nil
    File.open(path, 'r').readlines.each{|l|
      next unless l =~ /\Amsg/
      if l =~ /\Amsgid/
        pmsgid = l.sub(/\Amsgid\ "(.*)"\n/, '\1')
      elsif l == %{msgstr ""\n}
        todo[pmsgid] = nil unless pmsgid.blank?
      end
    }
    return todo
  end
  private


  # Active Filters Data Context
  #
  # Author:: Yann Azoury
  # Last Update:: 2012-11-11 20:10:39 UTC


  def data_context_filter_1

    ckie = (RUBY_VERSION =~ /^1.8/) ? Iconv.new('UTF-8//IGNORE', 'latin1').iconv(cookies[:active_filters] || "") :  (cookies[:active_filters] || "").force_encoding(Encoding::ISO_8859_1).encode!(Encoding::UTF_8)
    if !ckie.blank?
      find_hash = AppLocale.named_scope_active_filter_method(ActiveSupport::JSON.decode(ckie))
      conds = find_hash[:conditions]
      @joins_fields = find_hash[:joins]

      AppLocale.send(:with_scope, {:find => {:conditions => conds, :joins => (@joins_fields || [])}}) {
        yield
      }

    else
      yield
    end
  end

  def faveod_cookies_loading
    @pres_mode = cookies["#{APP_SID}_app_locales_pres_mode"].to_sym unless cookies["#{APP_SID}_app_locales_pres_mode"].blank?
    @pres_mode = params["#{APP_SID}_app_locales_pres_mode"].to_sym unless params["#{APP_SID}_app_locales_pres_mode"].blank?
  end

end
