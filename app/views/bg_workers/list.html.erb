<%;################################################
## This file and all its content belong to Faveod S.A.S unless a commercial
## contract signed by a representant of Faveod S.A.S states otherwise.
##########
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################
## This has been generated by Faveod Generator on Thu Oct 31 16:38:11 +0100 2013
## It should be placed at 'app/views/bg_workers/list.html.erb'
## All manual modifications will be destroyed on next generation
################################################ %>

<h2 class="title"><img src="/images/page_icons/application_view_list.png" alt="<%= _(%q{List}) %>" /> <%= _(%q{Background Workers}) %> </h2>
<div id="container" class='content'>

<table style="width:100%"><tr><td style="width:50%;valign:top;vertical-align:top">
  <%= render :partial => 'tasks' %>
</td><td style="width:50%;valign:top;vertical-align:top">
  <%= render :partial => 'running'%>
</td></tr></table>

<h3><%= _(%q{Queued Jobs}) %></h3>
<% unless @no_menubar %>
<% @bg_worker ||= BgWorker.new %><form id="bg_workers_filter_form" class="filter_bar"><fieldset><legend><%= _(%q{Filters}) %></legend>
<label class="input_boolean" data-field="no_duplicate" for="no_duplicate_for" id="bg_workers_no_duplicate_<%= @bg_worker.id || 0 %>"><%= s_(%q{No duplicate: }) %><select class="not-aligned comparator" id="comp_no_duplicate" name="comp_no_duplicate" style="display:none"><%= options_for_select([['','']]+(BgWorker::COMPARATORS[:no_duplicate] || {}).keys.map{|k| [s_("boolean|#{k}"), k]}) %></select>
<select id="bg_worker_<%=  @bg_worker.id || 0  %>_no_duplicate" name="bg_worker[<%=  @bg_worker.id || 0  %>][no_duplicate]"><option value=""><%=  %></option>
<option value="1"><%= _(%q{true}) %></option>
<option value="0"><%= _(%q{false}) %></option></select></label>
</fieldset></form>
<% end %>
<div id="bg_workers_list" class="list">
<% if @bg_workers_groups %>
 <table id="bg_workers_table" summary="bg_workers list"><thead>
<tr class="containers"><th colspan="2"><%= _(%q{Start Conditions}) %></th><th colspan="3"><%= _(%q{Worker}) %></th><th colspan="2"><%= _(%q{Finished}) %></th><th class="no-sort" rowspan="2"></th></tr>
<tr><th id="bg_workers_start_cond_overview_th"><%= _(%q{Start}) %></th><th id="bg_workers_no_duplicate_th"><%= _(%q{No duplicate}) %></th><th id="bg_workers_name_th"><%= _(%q{Name}) %></th><th id="bg_workers_priority_th"><%= _(%q{Priority}) %></th><th id="bg_workers_planned_at_th"><%= _(%q{Planned at}) %></th><th id="bg_workers_completed_at_th"><%= _(%q{Completed at}) %></th><th id="bg_workers_logs_th"><%= _(%q{Logs}) %></th></tr>
</thead>

<% for key in @bg_workers_groups.keys %>

	<tr><th colspan="9" class="group"><%= key.nil? ? _('not set') : (key.respond_to?(:disp_name) ? key.disp_name : key.to_s.humanize ) %></th></tr>

<% @bg_workers_groups[key].each_with_index do |row,idx|
@bg_worker = row %>

		<tr class="<%= (idx % 2 == 1) ? 'odd' : 'even' %>" id="bg_workers_<%= @bg_worker.try(:id) %>" >
<td><span class="aligned"><%= h @bg_worker.start_cond_overview %></span></td>
<td><span class="aligned"><%=  @bg_worker.no_duplicate ? image_tag('std/ok.png') : image_tag('std/ko.png')  %></span></td>
<td><span class="aligned"><%= h @bg_worker.name %></span></td>
<td><span class="aligned"><%= h @bg_worker.priority %></span></td>
<td><span class="aligned"><%= h @bg_worker.planned_at ? @bg_worker.planned_at.strftime('%Y-%m-%d %H:%M:%S') : nil %></span>
</td>
<td><span class="aligned"><%= h @bg_worker.completed_at ? @bg_worker.completed_at.strftime('%Y-%m-%d %H:%M:%S') : nil %></span>
</td>
<td><span class="aligned"><%=  txt= @bg_worker.logs; h(txt.to(100)) + (txt.length > 100 ? '...' : '') unless txt.blank? %></span>
</td>
<td class="std_links"><%= links_for_list_element(@bg_worker) %></td>
</tr>
<% end %><% end %></table>
<% else %>
 <table class="sortable" id="bg_workers_table" summary="bg_workers list"><thead>
<tr class="containers"><th colspan="2"><%= _(%q{Start Conditions}) %></th><th colspan="3"><%= _(%q{Worker}) %></th><th colspan="2"><%= _(%q{Finished}) %></th><th class="no-sort" rowspan="2"></th></tr>
<tr><th id="bg_workers_start_cond_overview_th"><%= _(%q{Start}) %></th><th id="bg_workers_no_duplicate_th"><%= _(%q{No duplicate}) %></th><th id="bg_workers_name_th"><%= _(%q{Name}) %></th><th id="bg_workers_priority_th"><%= _(%q{Priority}) %></th><th id="bg_workers_planned_at_th"><%= _(%q{Planned at}) %></th><th id="bg_workers_completed_at_th"><%= _(%q{Completed at}) %></th><th id="bg_workers_logs_th"><%= _(%q{Logs}) %></th></tr>
</thead>

<tbody><% @bg_workers.each_with_index do |row,idx|
@bg_worker = row %>

		<tr class="<%= (idx % 2 == 1) ? 'odd' : 'even' %>" id="bg_workers_<%= @bg_worker.try(:id) %>" >
<td><span class="aligned"><%= h @bg_worker.start_cond_overview %></span></td>
<td><span class="aligned"><%=  @bg_worker.no_duplicate ? image_tag('std/ok.png') : image_tag('std/ko.png')  %></span></td>
<td><span class="aligned"><%= h @bg_worker.name %></span></td>
<td><span class="aligned"><%= h @bg_worker.priority %></span></td>
<td><span class="aligned"><%= h @bg_worker.planned_at ? @bg_worker.planned_at.strftime('%Y-%m-%d %H:%M:%S') : nil %></span>
</td>
<td><span class="aligned"><%= h @bg_worker.completed_at ? @bg_worker.completed_at.strftime('%Y-%m-%d %H:%M:%S') : nil %></span>
</td>
<td><span class="aligned"><%=  txt= @bg_worker.logs; h(txt.to(100)) + (txt.length > 100 ? '...' : '') unless txt.blank? %></span>
</td>
<td class="std_links"><%= links_for_list_element(@bg_worker) %></td>
</tr>
<% end %></tbody></table>
<% end %>

  <span style="margin-right:10px">
  <% if @pres_mode == :list_zoom %>
<a href="#" data-method="get" onclick="new Ajax.Updater('bg_workers_element', '<%= "/#{params[:lang]}" if params[:lang] %>/bg_workers/new', {asynchronous:true, evalScripts:true}); return false;" rel="nofollow" style="margin-right:10px" title="<%= _(%q{Loads a new record.}) %>"><img src="/images/page_icons/add.png" alt="<%= _(%q{New}) %>" title="<%= _(%q{New}) %>" /> <%= _(%q{New Bg Worker}) %></a>
<% else %>
<a href="<%= "/#{params[:lang]}" if params[:lang] %>/bg_workers/new" data-method="get" rel="nofollow" style="margin-right:10px" title="<%= _(%q{Loads a new record.}) %>"><img src="/images/page_icons/add.png" alt="<%= _(%q{New}) %>" title="<%= _(%q{New}) %>" /> <%= _(%q{New Bg Worker}) %></a>
<% end %>
  <%= link_to(image_tag('std/del.png', :title => _('Clear Queue')) + ' ' + _('Clear Queue'),
        {:controller => :bg_workers, :action => :clear_queue}, :confirm => _("Are you sure that you want to delete %{record}?") % {:record => _('everything')}, :method => :post) %>

  <%= will_paginate(@bg_workers, :previous_label => image_tag('std/go_left.png', :title => _("Previous page")), :next_label => image_tag('std/go_right.png', :title => _("Next page"))) %>
  </span>
</div>
</div>

<script type="text/javascript">
//<![CDATA[





function onload_list_call() {
$('bg_workers_filter_form').observe('change', function(ev) {
var hf = new Hash();
$A(["every", "triggered_by", "no_duplicate"]).each(function(elt) {
  if (!$('comp_'+elt).getValue().blank() && !$('bg_worker_0_'+elt).getValue().blank()) {
    var t = new Hash()
    t.set($('comp_'+elt).getValue(), $('bg_worker_0_'+elt).getValue())
    hf.set(elt, t)
  }
})
setCookie('active_filters', hf.toJSON(), '', window.location.pathname)
location.reload()
})

if (readCookie('active_filters')) {
  var h = $H(unescape(readCookie('active_filters')).evalJSON(true))
  $A(["every", "triggered_by", "no_duplicate"]).each(function(elt) {
     if (h.get(elt)) {
      var op = $H(h.get(elt)).keys().first()
      var val = $H(h.get(elt)).values().first()
      if (op && val && (op != $('comp_'+elt).getValue() || val != $('bg_worker_0_'+elt).getValue())) {
  $('comp_'+elt).setValue(op)
  $('bg_worker_0_'+elt).setValue(val)
      }
    }
  })
}
if ($('bg_workers_filter_form')) { typeof(Layout) != 'undefined' ? Layout.alignValues('.filter_bar FIELDSET') : alignValues($('bg_workers_filter_form').down())}
}
<% if request.xhr? %>onload_list_call();<% else %>if (typeof(Event) != 'undefined' && Event.observe) {
Event.observe(window, 'load', onload_list_call)
} else if (typeof(jQuery) != 'undefined') {
$(window).load(onload_list_call)
}<% end %>


//]]>
</script>