# -*- encoding : utf-8 -*-
################################################
## This file and all its content belong to Faveod S.A.S unless a commercial
## contract signed by a representant of Faveod S.A.S states otherwise.
##########
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################
## This has been generated by Faveod Generator on Mon Apr 01 10:59:39 +0200 2013
## It should be placed at 'app/helpers/application_helper.rb'
## All manual modifications will be destroyed on next generation
################################################


module ApplicationHelper


  # Generally used for list actions.
  #
  # Author:: Yann Azoury
  # Version:: 12
  # Last Update:: 2013-01-29 23:35:49 UTC
  # Status:: <%= _(%q{Validation Pending}) %>


  def links_for_list_element(row, opts={})
    return "" if @no_row_links
    html = []
    if @pres_mode == :list_zoom
      html << link_to_remote(image_tag('std/show.png', :title => _('Show')),
      :url => {:controller => :root_maveocs, :action => :show, :id => row.id},
      :update => "root_maveocs_element")
      html << link_to_remote(image_tag('std/edit.png', :title => _('Edit')),
      :url => {:controller => :root_maveocs, :action => :edit, :id => row.id},
      :update => "root_maveocs_element")
    else
      html << nil
      html << nil
      html << nil
    end
    html << nil
    return html.compact.join(' | ').html_safe
  end


  # Author:: Sylvain Abélard
  # Version:: 17
  # Last Update:: 2013-03-19 15:06:38 UTC
  # Status:: <%= _(%q{Validation Pending}) %>


  def bottom_links_for_show(opts={})

    links = []
    if request.xhr?
      links << link_to_remote(image_tag('std/edit.png', :title => _("Edit")), :update => 'root_maveocs_element', :url => {:action => :edit, :id => @root_maveoc, :version => params[:version]})
    else
      links << nil
    end
    links << nil
    links << nil
    unless opts[:no_sibling]
      prev = RootMaveoc.first(:select => '`root_maveocs`.id', :conditions => ["`root_maveocs`.id < ?", @root_maveoc.id], :order => '`root_maveocs`.id DESC')
      nex = RootMaveoc.first(:select => '`root_maveocs`.id', :conditions => ["`root_maveocs`.id > ?", @root_maveoc.id], :order => '`root_maveocs`.id')
      if request.xhr?
        links << link_to_remote(image_tag('std/go_left.png', :title => _("Previous")), :update => 'root_maveocs_element', :url => {:action => :show, :id => prev.id}) if prev
        links << link_to_remote(image_tag('std/go_right.png', :title => _("Next")), :update => 'root_maveocs_element', :url => {:action => :show, :id => nex.id}) if nex
      else
        if prev
          links << nil
        end
        if nex
          links << nil
        end
      end
    end
    return content_tag(:span, links.compact.join(' | ').html_safe, :class => 'std_links')
  end


  # Author:: Sylvain Abélard
  # Version:: 17
  # Last Update:: 2013-03-19 15:06:52 UTC
  # Status:: <%= _(%q{Validation Pending}) %>


  def bottom_links_for_edit(opts={})

    links = []
    if request.xhr?
      links << link_to_remote(image_tag('std/show.png', :title => _('Show')), :update => 'root_maveocs_element', :url => {:action => :show, :id => @root_maveoc, :version => params[:version]})
    else
      links << nil
    end
    links << nil
    links << nil
    prev = RootMaveoc.first(:select => '`root_maveocs`.id', :conditions => ["`root_maveocs`.id < ?", @root_maveoc.id], :order => '`root_maveocs`.id DESC')
    nex = RootMaveoc.first(:select => '`root_maveocs`.id', :conditions => ["`root_maveocs`.id > ?", @root_maveoc.id], :order => '`root_maveocs`.id')
    if request.xhr?
      links << link_to_remote(image_tag('std/go_left.png', :title => _('Previous')), :update => 'root_maveocs_element', :url => {:action => :edit, :id => prev.id}) if prev
      links << link_to_remote(image_tag('std/go_right.png', :title => _('Next')), :update => 'root_maveocs_element', :url => {:action => :edit, :id => nex.id}) if nex
    else
      if prev
        links << nil
      end
      if nex
        links << nil
      end
    end
    return content_tag(:span, links.compact.join(' | ').html_safe, :class => 'std_links')
  end


  # Author:: Yann Azoury
  # Version:: 4
  # Last Update:: 2012-11-08 19:16:46 UTC
  # Status:: <%= _(%q{Validation Pending}) %>


  def link_to_prototype_window(name, window_id, options = {}, html_options = {})
    options.merge!( :windowParameters => {} ) if !options.has_key?(:windowParameters)
    options[:zIndex] ||= 1100
    options[:width] ||= 400
    ajax_content = options.delete(:ajax_content) if options.has_key?(:ajax_content)
    ajax_options = options.has_key?(:ajax_options) ? options.delete(:ajax_options) : {}
    options.delete(:destroy_on_close) and options[:destroyOnClose] ||= true if options[:destroy_on_close]
    js_code = "var win = new Window(\"#{window_id}\", #{options.to_json} );win.showCenter(#{'true' if options[:modal]});"
    js_code << "win.getContent().innerHTML = '#{options[:content]}';" if options[:content]
      js_code << "win.setAjaxContent(\"#{ajax_content}\", #{ajax_options.to_json} );" if ajax_content
      return content_tag(:a, name, html_options.merge({
        :href => html_options[:href] || "#",
      :onclick => (html_options[:onclick] ? "#{html_options[:onclick]}; " : "") + js_code }))
    end


    # Useful for Rails 2, useless for Rails 3.
    #
    # Author:: Yann Azoury
    # Version:: 3
    # Last Update:: 2012-04-05 15:42:36 UTC
    # Status:: <%= _(%q{Validation Pending}) %>


    def csrf_meta_tag
      if protect_against_forgery?
        [tag('meta', :name => 'csrf-param', :content => request_forgery_protection_token),
          tag('meta', :name => 'csrf-token', :content => form_authenticity_token)
        ].join("\n").html_safe
      end
    end


    # From Rails 2.3 source code.
    #
    # Author:: Yann Azoury
    # Version:: 1
    # Last Update:: 2012-06-14 23:00:28 UTC
    # Status:: <%= _(%q{Validation Pending}) %>


    def error_messages_for(*params)
      options = params.extract_options!.symbolize_keys
      if object = options.delete(:object)
        objects = Array.wrap(object)
      else
        objects = params.collect {|object_name| instance_variable_get("@#{object_name}") }.compact
      end
      count  = objects.inject(0) {|sum, object| sum + object.errors.count }
      unless count.zero?
        html = {}
        [:id, :class].each do |key|
          if options.include?(key)
            value = options[key]
            html[key] = value unless value.blank?
          else
            html[key] = 'errorExplanation'
          end
        end
        options[:object_name] ||= params.first
        I18n.with_options :locale => options[:locale], :scope => [:activerecord, :errors, :template] do |locale|
          header_message = if options.include?(:header_message)
            options[:header_message]
          else
            object_name = options[:object_name].to_s
            object_name = I18n.t(object_name, :default => object_name.gsub('_', ' '), :scope => [:activerecord, :models], :count => 1)
            locale.t :header, :count => count, :model => object_name
          end
          message = options.include?(:message) ? options[:message] : locale.t(:body)
          error_messages = objects.sum {|object| object.errors.full_messages.map {|msg| content_tag(:li, ERB::Util.html_escape(msg)) } }.join.html_safe
          contents = ''
          contents << content_tag(options[:header_tag] || :h2, header_message) unless header_message.blank?
          contents << content_tag(:p, message) unless message.blank?
          contents << content_tag(:ul, error_messages)
          content_tag(:div, contents.html_safe, html)
        end
      else
        ''
      end
    end

  end
