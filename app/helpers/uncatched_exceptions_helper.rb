# encoding: utf-8
################################################
## This file and all its content belong to Faveod S.A.S unless a commercial
## contract signed by a representant of Faveod S.A.S states otherwise.
##########
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################
## This has been generated by Faveod Generator on Wed Aug 28 16:13:34 +0200 2013
## It should be placed at 'app/helpers/uncatched_exceptions_helper.rb'
## All manual modifications will be destroyed on next generation
################################################


module UncatchedExceptionsHelper


  # Generally used for list actions.
  #
  # Author:: Yann Azoury
  # Version:: 12
  # Last Update:: 2013-01-29 23:35:49 UTC
  # Status:: <%= _(%q{Validation Pending}) %>


  def links_for_list_element(row, opts={})
    return "" if @no_row_links
    html = []
    if @pres_mode == :list_zoom
      html << link_to_remote(image_tag('std/show.png', :title => _('Show')),
      :url => {:controller => :uncatched_exceptions, :action => :show, :id => row.id},
      :update => "uncatched_exceptions_element")
      html << link_to_remote(image_tag('std/edit.png', :title => _('Edit')),
      :url => {:controller => :uncatched_exceptions, :action => :edit, :id => row.id},
      :update => "uncatched_exceptions_element")
    else
      html << if @pres_mode == :list_zoom
        %Q{<a href="#" onclick="new Ajax.Updater('uncatched_exceptions_element', '#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/show/#{ row.id }', {asynchronous:true, evalScripts:true});location.href='#uncatched_exceptions_element'; return false;" title="#{ _(%q{Display the record.}) }"><img src="/images/std/show.png" alt="#{ _(%q{Show}) }" title="#{ _(%q{Show}) }" /></a>}
      else
        %Q{<a href="#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/show/#{ row.id }" title="#{ _(%q{Display the record.}) }"><img src="/images/std/show.png" alt="#{ _(%q{Show}) }" title="#{ _(%q{Show}) }" /></a>}
      end
      html << nil
      html << nil
    end
    html << if @pres_mode == :list_zoom
      %Q{<a href="#" data-confirm="#{ _('Do you really want to delete %{record}?') %
      {:record => @uncatched_exception.disp_name} }" data-method="post" onclick="new Ajax.Updater('uncatched_exceptions_element', '#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/destroy/#{ @uncatched_exception.id }', {asynchronous:true, evalScripts:true});location.href='#uncatched_exceptions_element'; return false;" title="#{ _(%q{Deletes an object or list of objects from the database.}) }"><img src="/images/page_icons/cancel.png" alt="#{ _(%q{Destroy}) }" title="#{ _(%q{Destroy}) }" /></a>}
    else
      %Q{<a data-confirm="#{ _('Do you really want to delete %{record}?') %
      {:record => @uncatched_exception.disp_name} }" data-method="post" href="#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/destroy/#{ @uncatched_exception.id }" title="#{ _(%q{Deletes an object or list of objects from the database.}) }"><img src="/images/page_icons/cancel.png" alt="#{ _(%q{Destroy}) }" title="#{ _(%q{Destroy}) }" /></a>}
    end
    return html.compact.join(' | ').html_safe
  end


  # Author:: Sylvain Abélard
  # Version:: 17
  # Last Update:: 2013-03-19 15:06:38 UTC
  # Status:: <%= _(%q{Validation Pending}) %>


  def bottom_links_for_show(opts={})

    links = []
    if request.xhr?
      links << link_to_remote(image_tag('std/edit.png', :title => _("Edit")), :update => 'uncatched_exceptions_element', :url => {:action => :edit, :id => @uncatched_exception, :version => params[:version]})
    else
      links << nil
    end
    links << if @pres_mode == :list_zoom
      %Q{<a href="#" data-confirm="#{ _('Do you really want to delete %{record}?') % {:record => @uncatched_exception.disp_name} }" data-method="post" onclick="new Ajax.Updater('uncatched_exceptions_element', '#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/destroy/#{ @uncatched_exception.id }', {asynchronous:true, evalScripts:true});location.href='#uncatched_exceptions_element'; return false;" title="#{ _(%q{Deletes an object or list of objects from the database.}) }"><img src="/images/page_icons/cancel.png" alt="#{ _(%q{Destroy}) }" title="#{ _(%q{Destroy}) }" /> #{ _(%q{Destroy}) }</a>}
    else
      %Q{<a data-confirm="#{ _('Do you really want to delete %{record}?') % {:record => @uncatched_exception.disp_name} }" data-method="post" href="#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/destroy/#{ @uncatched_exception.id }" title="#{ _(%q{Deletes an object or list of objects from the database.}) }"><img src="/images/page_icons/cancel.png" alt="#{ _(%q{Destroy}) }" title="#{ _(%q{Destroy}) }" /> #{ _(%q{Destroy}) }</a>}
    end
    links << if @pres_mode == :list_zoom
      %Q{<a href="#" onclick="new Ajax.Updater('uncatched_exceptions_element', '#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/index', {asynchronous:true, evalScripts:true});location.href='#uncatched_exceptions_element'; return false;" title="#{ _(%q{Index of all uncatched_exceptions.}) }"><img src="/images/page_icons/exclamation.png" alt="#{ _(%q{Uncatched Exceptions}) }" title="#{ _(%q{Uncatched Exceptions}) }"/> #{ _(%q{Uncatched Exceptions}) }</a>}
    else
      %Q{<a href="#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/index" title="#{ _(%q{Index of all uncatched_exceptions.}) }"><img src="/images/page_icons/exclamation.png" alt="#{ _(%q{Uncatched Exceptions}) }" title="#{ _(%q{Uncatched Exceptions}) }"/> #{ _(%q{Uncatched Exceptions}) }</a>}
    end
    unless opts[:no_sibling]
      prev = UncatchedException.first(:select => '`uncatched_exceptions`.id', :conditions => ["`uncatched_exceptions`.id < ?", @uncatched_exception.id], :order => '`uncatched_exceptions`.id DESC')
      nex = UncatchedException.first(:select => '`uncatched_exceptions`.id', :conditions => ["`uncatched_exceptions`.id > ?", @uncatched_exception.id], :order => '`uncatched_exceptions`.id')
      if request.xhr?
        links << link_to_remote(image_tag('std/go_left.png', :title => _("Previous")), :update => 'uncatched_exceptions_element', :url => {:action => :show, :id => prev.id}) if prev
        links << link_to_remote(image_tag('std/go_right.png', :title => _("Next")), :update => 'uncatched_exceptions_element', :url => {:action => :show, :id => nex.id}) if nex
      else
        if prev
          links << if @pres_mode == :list_zoom
            %Q{<a href="#" onclick="new Ajax.Updater('uncatched_exceptions_element', '#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/show/#{ prev.id }', {asynchronous:true, evalScripts:true});location.href='#uncatched_exceptions_element'; return false;" title="#{ _(%q{Display the record.}) }"><img src="/images/std/go_left.png" alt="#{ _(%q{Previous}) }" title="#{ _(%q{Previous}) }"/></a>}
          else
            %Q{<a href="#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/show/#{ prev.id }" title="#{ _(%q{Display the record.}) }"><img src="/images/std/go_left.png" alt="#{ _(%q{Previous}) }" title="#{ _(%q{Previous}) }"/></a>}
          end
        end
        if nex
          links << if @pres_mode == :list_zoom
            %Q{<a href="#" onclick="new Ajax.Updater('uncatched_exceptions_element', '#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/show/#{ nex.id }', {asynchronous:true, evalScripts:true});location.href='#uncatched_exceptions_element'; return false;" title="#{ _(%q{Display the record.}) }"><img src="/images/std/go_right.png" alt="#{ _(%q{Next}) }" title="#{ _(%q{Next}) }"/></a>}
          else
            %Q{<a href="#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/show/#{ nex.id }" title="#{ _(%q{Display the record.}) }"><img src="/images/std/go_right.png" alt="#{ _(%q{Next}) }" title="#{ _(%q{Next}) }"/></a>}
          end
        end
      end
    end
    return content_tag(:span, links.compact.join(' | ').html_safe, :class => 'std_links')
  end


  # Author:: Sylvain Abélard
  # Version:: 17
  # Last Update:: 2013-03-19 15:06:52 UTC
  # Status:: <%= _(%q{Validation Pending}) %>


  def bottom_links_for_edit(opts={})

    links = []
    if request.xhr?
      links << link_to_remote(image_tag('std/show.png', :title => _('Show')), :update => 'uncatched_exceptions_element', :url => {:action => :show, :id => @uncatched_exception, :version => params[:version]})
    else
      links << if @pres_mode == :list_zoom
        %Q{<a href="#" onclick="new Ajax.Updater('uncatched_exceptions_element', '#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/show/#{ @uncatched_exception.id }', {asynchronous:true, evalScripts:true});location.href='#uncatched_exceptions_element'; return false;" title="#{ _(%q{Display the record.}) }"><img src="/images/std/show.png" alt="#{ _(%q{Show}) }" title="#{ _(%q{Show}) }" /> #{ _(%q{Show}) }</a>}
      else
        %Q{<a href="#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/show/#{ @uncatched_exception.id }" title="#{ _(%q{Display the record.}) }"><img src="/images/std/show.png" alt="#{ _(%q{Show}) }" title="#{ _(%q{Show}) }" /> #{ _(%q{Show}) }</a>}
      end
    end
    links << if @pres_mode == :list_zoom
      %Q{<a href="#" data-confirm="#{ _('Do you really want to delete %{record}?') % {:record => @uncatched_exception.disp_name} }" data-method="post" onclick="new Ajax.Updater('uncatched_exceptions_element', '#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/destroy/#{ @uncatched_exception.id }', {asynchronous:true, evalScripts:true});location.href='#uncatched_exceptions_element'; return false;" title="#{ _(%q{Deletes an object or list of objects from the database.}) }"><img src="/images/page_icons/cancel.png" alt="#{ _(%q{Destroy}) }" title="#{ _(%q{Destroy}) }" /> #{ _(%q{Destroy}) }</a>}
    else
      %Q{<a data-confirm="#{ _('Do you really want to delete %{record}?') % {:record => @uncatched_exception.disp_name} }" data-method="post" href="#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/destroy/#{ @uncatched_exception.id }" title="#{ _(%q{Deletes an object or list of objects from the database.}) }"><img src="/images/page_icons/cancel.png" alt="#{ _(%q{Destroy}) }" title="#{ _(%q{Destroy}) }" /> #{ _(%q{Destroy}) }</a>}
    end
    links << if @pres_mode == :list_zoom
      %Q{<a href="#" onclick="new Ajax.Updater('uncatched_exceptions_element', '#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/index', {asynchronous:true, evalScripts:true});location.href='#uncatched_exceptions_element'; return false;" title="#{ _(%q{Index of all uncatched_exceptions.}) }"><img src="/images/page_icons/exclamation.png" alt="#{ _(%q{Uncatched Exceptions}) }" title="#{ _(%q{Uncatched Exceptions}) }"/> #{ _(%q{Uncatched Exceptions}) }</a>}
    else
      %Q{<a href="#{ "/#{params[:lang]}" if params[:lang] }/uncatched_exceptions/index" title="#{ _(%q{Index of all uncatched_exceptions.}) }"><img src="/images/page_icons/exclamation.png" alt="#{ _(%q{Uncatched Exceptions}) }" title="#{ _(%q{Uncatched Exceptions}) }"/> #{ _(%q{Uncatched Exceptions}) }</a>}
    end
    prev = UncatchedException.first(:select => '`uncatched_exceptions`.id', :conditions => ["`uncatched_exceptions`.id < ?", @uncatched_exception.id], :order => '`uncatched_exceptions`.id DESC')
    nex = UncatchedException.first(:select => '`uncatched_exceptions`.id', :conditions => ["`uncatched_exceptions`.id > ?", @uncatched_exception.id], :order => '`uncatched_exceptions`.id')
    if request.xhr?
      links << link_to_remote(image_tag('std/go_left.png', :title => _('Previous')), :update => 'uncatched_exceptions_element', :url => {:action => :edit, :id => prev.id}) if prev
      links << link_to_remote(image_tag('std/go_right.png', :title => _('Next')), :update => 'uncatched_exceptions_element', :url => {:action => :edit, :id => nex.id}) if nex
    else
      if prev
        links << nil
      end
      if nex
        links << nil
      end
    end
    return content_tag(:span, links.compact.join(' | ').html_safe, :class => 'std_links')
  end

end
