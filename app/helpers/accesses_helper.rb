# encoding: utf-8
################################################
## This file and all its content belong to Faveod S.A.S unless a commercial
## contract signed by a representant of Faveod S.A.S states otherwise.
##########
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################
## This has been generated by Faveod Generator on Thu Oct 31 16:40:24 +0100 2013
## It should be placed at 'app/helpers/accesses_helper.rb'
## All manual modifications will be destroyed on next generation
################################################


module AccessesHelper


  # Generally used for list actions.
  #
  # Author:: Yann Azoury
  # Version:: 12
  # Last Update:: 2013-01-29 23:35:49 UTC
  # Status:: Validation Pending


  def links_for_list_element(row, opts={})
    return "" if @no_row_links
    html = []
    if @pres_mode == :list_zoom
      html << link_to_remote(image_tag('std/show.png', :title => _('Show')),
      :url => {:controller => :accesses, :action => :show, :id => row.id},
      :update => "accesses_element")
      html << link_to_remote(image_tag('std/edit.png', :title => _('Edit')),
      :url => {:controller => :accesses, :action => :edit, :id => row.id},
      :update => "accesses_element")
    else
      html << nil
      html << nil
      html << nil
    end
    html << nil
    return html.compact.join(' | ').html_safe
  end


  # Author:: Sylvain Abélard
  # Version:: 17
  # Last Update:: 2013-03-19 15:06:38 UTC
  # Status:: Validation Pending


  def bottom_links_for_show(opts={})

    links = []
    if request.xhr?
      links << link_to_remote(image_tag('std/edit.png', :title => _("Edit")), :update => 'accesses_element', :url => {:action => :edit, :id => @access, :version => params[:version]})
    else
      links << nil
    end
    links << nil
    links << if @pres_mode == :list_zoom
      %Q{<a href="#" data-method="get" onclick="new Ajax.Updater('accesses_element', '#{ "/#{params[:lang]}" if params[:lang] }/accesses/index', {asynchronous:true, evalScripts:true});location.href='#accesses_element'; return false;" rel="nofollow" title="#{ _(%q{Index of all accesses.}) }"><img src="/images/page_icons/table_key.png" alt="#{ _(%q{Accesses}) }" title="#{ _(%q{Accesses}) }"/> #{ _(%q{Accesses}) }</a>}
    else
      %Q{<a data-method="get" href="#{ "/#{params[:lang]}" if params[:lang] }/accesses/index" rel="nofollow" title="#{ _(%q{Index of all accesses.}) }"><img src="/images/page_icons/table_key.png" alt="#{ _(%q{Accesses}) }" title="#{ _(%q{Accesses}) }"/> #{ _(%q{Accesses}) }</a>}
    end
    unless opts[:no_sibling]
      prev = Access.first(:select => '`accesses`.id', :conditions => ["`accesses`.id < ?", @access.id], :order => '`accesses`.id DESC')
      nex = Access.first(:select => '`accesses`.id', :conditions => ["`accesses`.id > ?", @access.id], :order => '`accesses`.id')
      if request.xhr?
        links << link_to_remote(image_tag('std/go_left.png', :title => _("Previous")), :update => 'accesses_element', :url => {:action => :show, :id => prev.id}) if prev
        links << link_to_remote(image_tag('std/go_right.png', :title => _("Next")), :update => 'accesses_element', :url => {:action => :show, :id => nex.id}) if nex
      else
        if prev
          links << nil
        end
        if nex
          links << nil
        end
      end
    end
    return content_tag(:span, links.compact.join(' | ').html_safe, :class => 'std_links')
  end


  # Author:: Sylvain Abélard
  # Version:: 17
  # Last Update:: 2013-03-19 15:06:52 UTC
  # Status:: Validation Pending


  def bottom_links_for_edit(opts={})

    links = []
    if request.xhr?
      links << link_to_remote(image_tag('std/show.png', :title => _('Show')), :update => 'accesses_element', :url => {:action => :show, :id => @access, :version => params[:version]})
    else
      links << nil
    end
    links << nil
    links << if @pres_mode == :list_zoom
      %Q{<a href="#" data-method="get" onclick="new Ajax.Updater('accesses_element', '#{ "/#{params[:lang]}" if params[:lang] }/accesses/index', {asynchronous:true, evalScripts:true});location.href='#accesses_element'; return false;" rel="nofollow" title="#{ _(%q{Index of all accesses.}) }"><img src="/images/page_icons/table_key.png" alt="#{ _(%q{Accesses}) }" title="#{ _(%q{Accesses}) }"/> #{ _(%q{Accesses}) }</a>}
    else
      %Q{<a data-method="get" href="#{ "/#{params[:lang]}" if params[:lang] }/accesses/index" rel="nofollow" title="#{ _(%q{Index of all accesses.}) }"><img src="/images/page_icons/table_key.png" alt="#{ _(%q{Accesses}) }" title="#{ _(%q{Accesses}) }"/> #{ _(%q{Accesses}) }</a>}
    end
    prev = Access.first(:select => '`accesses`.id', :conditions => ["`accesses`.id < ?", @access.id], :order => '`accesses`.id DESC')
    nex = Access.first(:select => '`accesses`.id', :conditions => ["`accesses`.id > ?", @access.id], :order => '`accesses`.id')
    if request.xhr?
      links << link_to_remote(image_tag('std/go_left.png', :title => _('Previous')), :update => 'accesses_element', :url => {:action => :edit, :id => prev.id}) if prev
      links << link_to_remote(image_tag('std/go_right.png', :title => _('Next')), :update => 'accesses_element', :url => {:action => :edit, :id => nex.id}) if nex
    else
      if prev
        links << nil
      end
      if nex
        links << nil
      end
    end
    return content_tag(:span, links.compact.join(' | ').html_safe, :class => 'std_links')
  end


  # Displays details about series
  #
  # Author:: Sylvain Abélard
  # Version:: 1
  # Last Update:: 2009-10-05 13:31:56 UTC
  # Status:: In Progress


  def series_details(s, txt=nil)
    return 'empty' if s.blank?
    info = "#{s.calculation}"
    info << " of #{s.field.name}" if s.field
      info << " by #{s.key_field.name}" if s.key_field
        details = txt || info
        content_tag(:span,
        content_tag(:span, '&nbsp;&nbsp;&nbsp;', :style => "background-color: #{s.html_color}; border: 1px inset gray;") +
        " #{s.disp_name} [#{details}]",
        :title => info,
        :class => "report_#{s.serie_type.downcase}")
      end

    end
