# encoding: utf-8
################################################
## This file and all its content belong to Faveod S.A.S unless a commercial
## contract signed by a representant of Faveod S.A.S states otherwise.
##########
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################
## This has been generated by Faveod Generator on Mon Jul 08 14:03:08 +0200 2013
## It should be placed at 'app/helpers/profile_accesses_helper.rb'
## All manual modifications will be destroyed on next generation
################################################


module ProfileAccessesHelper


  # Generally used for list actions.
  #
  # Author:: Yann Azoury
  # Version:: 12
  # Last Update:: 2013-01-29 23:35:49 UTC
  # Status:: <%= _(%q{Validation Pending}) %>


  def links_for_list_element(row, opts={})
    return "" if @no_row_links
    html = []
    if @pres_mode == :list_zoom
      html << link_to_remote(image_tag('std/show.png', :title => _('Show')),
      :url => {:controller => :profile_accesses, :action => :show, :id => row.id},
      :update => "profile_accesses_element")
      html << link_to_remote(image_tag('std/edit.png', :title => _('Edit')),
      :url => {:controller => :profile_accesses, :action => :edit, :id => row.id},
      :update => "profile_accesses_element")
    else
      html << nil
      html << nil
      html << nil
    end
    html << nil
    return html.compact.join(' | ').html_safe
  end


  # Author:: Sylvain Abélard
  # Version:: 17
  # Last Update:: 2013-03-19 15:06:38 UTC
  # Status:: <%= _(%q{Validation Pending}) %>


  def bottom_links_for_show(opts={})

    links = []
    if request.xhr?
      links << link_to_remote(image_tag('std/edit.png', :title => _("Edit")), :update => 'profile_accesses_element', :url => {:action => :edit, :id => @profile_access, :version => params[:version]})
    else
      links << nil
    end
    links << nil
    links << nil
    unless opts[:no_sibling]
      prev = ProfileAccess.first(:select => '`profile_accesses`.id', :conditions => ["`profile_accesses`.id < ?", @profile_access.id], :order => '`profile_accesses`.id DESC')
      nex = ProfileAccess.first(:select => '`profile_accesses`.id', :conditions => ["`profile_accesses`.id > ?", @profile_access.id], :order => '`profile_accesses`.id')
      if request.xhr?
        links << link_to_remote(image_tag('std/go_left.png', :title => _("Previous")), :update => 'profile_accesses_element', :url => {:action => :show, :id => prev.id}) if prev
        links << link_to_remote(image_tag('std/go_right.png', :title => _("Next")), :update => 'profile_accesses_element', :url => {:action => :show, :id => nex.id}) if nex
      else
        if prev
          links << nil
        end
        if nex
          links << nil
        end
      end
    end
    return content_tag(:span, links.compact.join(' | ').html_safe, :class => 'std_links')
  end


  # Author:: Sylvain Abélard
  # Version:: 17
  # Last Update:: 2013-03-19 15:06:52 UTC
  # Status:: <%= _(%q{Validation Pending}) %>


  def bottom_links_for_edit(opts={})

    links = []
    if request.xhr?
      links << link_to_remote(image_tag('std/show.png', :title => _('Show')), :update => 'profile_accesses_element', :url => {:action => :show, :id => @profile_access, :version => params[:version]})
    else
      links << nil
    end
    links << nil
    links << nil
    prev = ProfileAccess.first(:select => '`profile_accesses`.id', :conditions => ["`profile_accesses`.id < ?", @profile_access.id], :order => '`profile_accesses`.id DESC')
    nex = ProfileAccess.first(:select => '`profile_accesses`.id', :conditions => ["`profile_accesses`.id > ?", @profile_access.id], :order => '`profile_accesses`.id')
    if request.xhr?
      links << link_to_remote(image_tag('std/go_left.png', :title => _('Previous')), :update => 'profile_accesses_element', :url => {:action => :edit, :id => prev.id}) if prev
      links << link_to_remote(image_tag('std/go_right.png', :title => _('Next')), :update => 'profile_accesses_element', :url => {:action => :edit, :id => nex.id}) if nex
    else
      if prev
        links << nil
      end
      if nex
        links << nil
      end
    end
    return content_tag(:span, links.compact.join(' | ').html_safe, :class => 'std_links')
  end

end
