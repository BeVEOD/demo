# encoding: utf-8
################################################
## This file and all its content belong to Faveod S.A.S unless a commercial
## contract signed by a representant of Faveod S.A.S states otherwise.
##########
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################
## This has been generated by Faveod Generator on Thu Oct 31 16:38:01 +0100 2013
## It should be placed at 'app/helpers/smart_queries_helper.rb'
## All manual modifications will be destroyed on next generation
################################################


module SmartQueriesHelper


  # Generally used for list actions.
  #
  # Author:: Yann Azoury
  # Version:: 12
  # Last Update:: 2013-01-29 23:35:49 UTC
  # Status:: Validation Pending


  def links_for_list_element(row, opts={})
    return "" if @no_row_links
    html = []
    if @pres_mode == :list_zoom
      html << link_to_remote(image_tag('std/show.png', :title => _('Show')),
      :url => {:controller => :smart_queries, :action => :show, :id => row.id},
      :update => "smart_queries_element")
      html << link_to_remote(image_tag('std/edit.png', :title => _('Edit')),
      :url => {:controller => :smart_queries, :action => :edit, :id => row.id},
      :update => "smart_queries_element")
    else
      html << if @pres_mode == :list_zoom
        %Q{<a href="#" data-method="get" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/show/#{ row.id }', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" rel="nofollow" title="#{ _(%q{Display the record.}) }"><img src="/images/std/show.png" alt="#{ _(%q{Show}) }" title="#{ _(%q{Show}) }" /></a>}
      else
        %Q{<a data-method="get" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/show/#{ row.id }" rel="nofollow" title="#{ _(%q{Display the record.}) }"><img src="/images/std/show.png" alt="#{ _(%q{Show}) }" title="#{ _(%q{Show}) }" /></a>}
      end
      html << if @pres_mode == :list_zoom
        %Q{<a href="#" data-method="get" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/edit/#{ row.id }', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" rel="nofollow" title="#{ _(%q{Load the data to fill the edit form.}) }"><img src="/images/page_icons/page_white_paintbrush.png" alt="#{ _(%q{Edit}) }" title="#{ _(%q{Edit}) }" /></a>}
      else
        %Q{<a data-method="get" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/edit/#{ row.id }" rel="nofollow" title="#{ _(%q{Load the data to fill the edit form.}) }"><img src="/images/page_icons/page_white_paintbrush.png" alt="#{ _(%q{Edit}) }" title="#{ _(%q{Edit}) }" /></a>}
      end
      html << nil
    end
    html << if @pres_mode == :list_zoom
      %Q{<a href="#" data-confirm="#{ _('Do you really want to delete %{record}?') %
      {:record => @smart_query.disp_name} }" data-method="post" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/destroy/#{ @smart_query.id }', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" title="#{ _(%q{Deletes an object or list of objects from the database.}) }"><img src="/images/page_icons/cancel.png" alt="#{ _(%q{Destroy}) }" title="#{ _(%q{Destroy}) }" /></a>}
    else
      %Q{<a data-confirm="#{ _('Do you really want to delete %{record}?') %
      {:record => @smart_query.disp_name} }" data-method="post" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/destroy/#{ @smart_query.id }" title="#{ _(%q{Deletes an object or list of objects from the database.}) }"><img src="/images/page_icons/cancel.png" alt="#{ _(%q{Destroy}) }" title="#{ _(%q{Destroy}) }" /></a>}
    end
    return html.compact.join(' | ').html_safe
  end


  # Author:: Sylvain Ab√©lard
  # Version:: 17
  # Last Update:: 2013-03-19 15:06:38 UTC
  # Status:: Validation Pending


  def bottom_links_for_show(opts={})

    links = []
    if request.xhr?
      links << link_to_remote(image_tag('std/edit.png', :title => _("Edit")), :update => 'smart_queries_element', :url => {:action => :edit, :id => @smart_query, :version => params[:version]})
    else
      links << if @pres_mode == :list_zoom
        %Q{<a href="#" data-method="get" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/edit/#{ @smart_query.id }', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" rel="nofollow" title="#{ _(%q{Load the data to fill the edit form.}) }"><img src="/images/page_icons/page_white_paintbrush.png" alt="#{ _(%q{Edit}) }" title="#{ _(%q{Edit}) }" /> #{ _(%q{Edit}) }</a>}
      else
        %Q{<a data-method="get" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/edit/#{ @smart_query.id }" rel="nofollow" title="#{ _(%q{Load the data to fill the edit form.}) }"><img src="/images/page_icons/page_white_paintbrush.png" alt="#{ _(%q{Edit}) }" title="#{ _(%q{Edit}) }" /> #{ _(%q{Edit}) }</a>}
      end
    end
    links << if @pres_mode == :list_zoom
      %Q{<a href="#" data-confirm="#{ _('Do you really want to delete %{record}?') % {:record => @smart_query.disp_name} }" data-method="post" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/destroy/#{ @smart_query.id }', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" title="#{ _(%q{Deletes an object or list of objects from the database.}) }"><img src="/images/page_icons/cancel.png" alt="#{ _(%q{Destroy}) }" title="#{ _(%q{Destroy}) }" /> #{ _(%q{Destroy}) }</a>}
    else
      %Q{<a data-confirm="#{ _('Do you really want to delete %{record}?') % {:record => @smart_query.disp_name} }" data-method="post" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/destroy/#{ @smart_query.id }" title="#{ _(%q{Deletes an object or list of objects from the database.}) }"><img src="/images/page_icons/cancel.png" alt="#{ _(%q{Destroy}) }" title="#{ _(%q{Destroy}) }" /> #{ _(%q{Destroy}) }</a>}
    end
    links << if @pres_mode == :list_zoom
      %Q{<a href="#" data-method="get" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/index', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" rel="nofollow" title="#{ _(%q{Index of all smart_queries.}) }"><img src="/images/page_icons/table_lightning.png" alt="#{ _(%q{Smart Queries}) }" title="#{ _(%q{Smart Queries}) }"/> #{ _(%q{Smart Queries}) }</a>}
    else
      %Q{<a data-method="get" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/index" rel="nofollow" title="#{ _(%q{Index of all smart_queries.}) }"><img src="/images/page_icons/table_lightning.png" alt="#{ _(%q{Smart Queries}) }" title="#{ _(%q{Smart Queries}) }"/> #{ _(%q{Smart Queries}) }</a>}
    end
    unless opts[:no_sibling]
      prev = SmartQuery.first(:select => '`smart_queries`.id', :conditions => ["`smart_queries`.id < ?", @smart_query.id], :order => '`smart_queries`.id DESC')
      nex = SmartQuery.first(:select => '`smart_queries`.id', :conditions => ["`smart_queries`.id > ?", @smart_query.id], :order => '`smart_queries`.id')
      if request.xhr?
        links << link_to_remote(image_tag('std/go_left.png', :title => _("Previous")), :update => 'smart_queries_element', :url => {:action => :show, :id => prev.id}) if prev
        links << link_to_remote(image_tag('std/go_right.png', :title => _("Next")), :update => 'smart_queries_element', :url => {:action => :show, :id => nex.id}) if nex
      else
        if prev
          links << if @pres_mode == :list_zoom
            %Q{<a href="#" data-method="get" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/show/#{ prev.id }', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" rel="nofollow" title="#{ _(%q{Display the record.}) }"><img src="/images/std/go_left.png" alt="#{ _(%q{Previous}) }" title="#{ _(%q{Previous}) }"/></a>}
          else
            %Q{<a data-method="get" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/show/#{ prev.id }" rel="nofollow" title="#{ _(%q{Display the record.}) }"><img src="/images/std/go_left.png" alt="#{ _(%q{Previous}) }" title="#{ _(%q{Previous}) }"/></a>}
          end
        end
        if nex
          links << if @pres_mode == :list_zoom
            %Q{<a href="#" data-method="get" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/show/#{ nex.id }', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" rel="nofollow" title="#{ _(%q{Display the record.}) }"><img src="/images/std/go_right.png" alt="#{ _(%q{Next}) }" title="#{ _(%q{Next}) }"/></a>}
          else
            %Q{<a data-method="get" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/show/#{ nex.id }" rel="nofollow" title="#{ _(%q{Display the record.}) }"><img src="/images/std/go_right.png" alt="#{ _(%q{Next}) }" title="#{ _(%q{Next}) }"/></a>}
          end
        end
      end
    end
    return content_tag(:span, links.compact.join(' | ').html_safe, :class => 'std_links')
  end


  # Author:: Sylvain Ab√©lard
  # Version:: 17
  # Last Update:: 2013-03-19 15:06:52 UTC
  # Status:: Validation Pending


  def bottom_links_for_edit(opts={})

    links = []
    if request.xhr?
      links << link_to_remote(image_tag('std/show.png', :title => _('Show')), :update => 'smart_queries_element', :url => {:action => :show, :id => @smart_query, :version => params[:version]})
    else
      links << if @pres_mode == :list_zoom
        %Q{<a href="#" data-method="get" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/show/#{ @smart_query.id }', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" rel="nofollow" title="#{ _(%q{Display the record.}) }"><img src="/images/std/show.png" alt="#{ _(%q{Show}) }" title="#{ _(%q{Show}) }" /> #{ _(%q{Show}) }</a>}
      else
        %Q{<a data-method="get" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/show/#{ @smart_query.id }" rel="nofollow" title="#{ _(%q{Display the record.}) }"><img src="/images/std/show.png" alt="#{ _(%q{Show}) }" title="#{ _(%q{Show}) }" /> #{ _(%q{Show}) }</a>}
      end
    end
    links << if @pres_mode == :list_zoom
      %Q{<a href="#" data-confirm="#{ _('Do you really want to delete %{record}?') % {:record => @smart_query.disp_name} }" data-method="post" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/destroy/#{ @smart_query.id }', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" title="#{ _(%q{Deletes an object or list of objects from the database.}) }"><img src="/images/page_icons/cancel.png" alt="#{ _(%q{Destroy}) }" title="#{ _(%q{Destroy}) }" /> #{ _(%q{Destroy}) }</a>}
    else
      %Q{<a data-confirm="#{ _('Do you really want to delete %{record}?') % {:record => @smart_query.disp_name} }" data-method="post" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/destroy/#{ @smart_query.id }" title="#{ _(%q{Deletes an object or list of objects from the database.}) }"><img src="/images/page_icons/cancel.png" alt="#{ _(%q{Destroy}) }" title="#{ _(%q{Destroy}) }" /> #{ _(%q{Destroy}) }</a>}
    end
    links << if @pres_mode == :list_zoom
      %Q{<a href="#" data-method="get" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/index', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" rel="nofollow" title="#{ _(%q{Index of all smart_queries.}) }"><img src="/images/page_icons/table_lightning.png" alt="#{ _(%q{Smart Queries}) }" title="#{ _(%q{Smart Queries}) }"/> #{ _(%q{Smart Queries}) }</a>}
    else
      %Q{<a data-method="get" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/index" rel="nofollow" title="#{ _(%q{Index of all smart_queries.}) }"><img src="/images/page_icons/table_lightning.png" alt="#{ _(%q{Smart Queries}) }" title="#{ _(%q{Smart Queries}) }"/> #{ _(%q{Smart Queries}) }</a>}
    end
    prev = SmartQuery.first(:select => '`smart_queries`.id', :conditions => ["`smart_queries`.id < ?", @smart_query.id], :order => '`smart_queries`.id DESC')
    nex = SmartQuery.first(:select => '`smart_queries`.id', :conditions => ["`smart_queries`.id > ?", @smart_query.id], :order => '`smart_queries`.id')
    if request.xhr?
      links << link_to_remote(image_tag('std/go_left.png', :title => _('Previous')), :update => 'smart_queries_element', :url => {:action => :edit, :id => prev.id}) if prev
      links << link_to_remote(image_tag('std/go_right.png', :title => _('Next')), :update => 'smart_queries_element', :url => {:action => :edit, :id => nex.id}) if nex
    else
      if prev
        links << if @pres_mode == :list_zoom
          %Q{<a href="#" data-method="get" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/edit/#{ prev.id }', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" rel="nofollow" title="#{ _(%q{Load the data to fill the edit form.}) }"><img src="/images/std/go_left.png" alt="#{ _(%q{Previous}) }" title="#{ _(%q{Previous}) }"/></a>}
        else
          %Q{<a data-method="get" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/edit/#{ prev.id }" rel="nofollow" title="#{ _(%q{Load the data to fill the edit form.}) }"><img src="/images/std/go_left.png" alt="#{ _(%q{Previous}) }" title="#{ _(%q{Previous}) }"/></a>}
        end
      end
      if nex
        links << if @pres_mode == :list_zoom
          %Q{<a href="#" data-method="get" onclick="new Ajax.Updater('smart_queries_element', '#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/edit/#{ nex.id }', {asynchronous:true, evalScripts:true});location.href='#smart_queries_element'; return false;" rel="nofollow" title="#{ _(%q{Load the data to fill the edit form.}) }"><img src="/images/std/go_right.png" alt="#{ _(%q{Next}) }" title="#{ _(%q{Next}) }"/></a>}
        else
          %Q{<a data-method="get" href="#{ "/#{params[:lang]}" if params[:lang] }/smart_queries/edit/#{ nex.id }" rel="nofollow" title="#{ _(%q{Load the data to fill the edit form.}) }"><img src="/images/std/go_right.png" alt="#{ _(%q{Next}) }" title="#{ _(%q{Next}) }"/></a>}
        end
      end
    end
    return content_tag(:span, links.compact.join(' | ').html_safe, :class => 'std_links')
  end


  # Author:: Sylvain Ab√©lard
  # Version:: 13
  # Last Update:: 2010-05-06 01:49:50 UTC
  # Status:: Requires Tests


  def compare_select(table, field=nil, selected=nil)
    field = 'nil' if field.blank?
    values = case @model::FIELDS[field]
    when :string, :text
      [[_('contains'), 'LIKE2'], [_("does not contain"), 'NOT LIKE2'], [_("is"), 'LIKE'], [_("is not"), 'NOT LIKE'], [_("is not set"), 'IS NULL'], [_("in"), 'IN']]
    when :integer, :float
      [['=', '='], ['<>', '<>'], ['>', '>'], ['<', '<'], [_('> or ='), '>='], [_('< or ='), '<='], [_("is not set"), 'IS NULL']]
    when :date, :datetime, :time
      [['', ''], ['=', '='], ['<>', '<>'], ['>', '>'], ['<', '<'], [_('> or ='), '>='], [_('< or ='), '<='], [_("is not set"), 'IS NULL']]
    when :boolean
      [[_('is'), '='], [_('is not'), '<>'], [_('is not set'), 'IS NULL']]
    when :binary
      ['is named', 'size larger than', 'size smaller than', 'is not set'].map{|a| [_(a), a]}
    when :static_list, :bt_assoc, :ho_assoc, :hm_assoc, :habtm_assoc
      [[_("is"), '='], [_("is not"), '<>'], [_("is not set"), 'IS NULL'], [_("in"), 'IN']]
    when nil
      [[_("contains"), 'LIKE2'], [_("does not contain"), 'NOT LIKE2'], [_("is"), 'LIKE'], [_("is not"), 'NOT LIKE'], [_("is not set"), 'IS NULL'], [_("in"), 'IN']]
    else

      # raise "Unknown type: #{@model::FIELDS[field.to_sym]} (field: #{field}, model: #{@model.inspect})"

      []
    end
    return options_for_select([['', '']] + values, selected)
  end


  # Author:: Sylvain Ab√©lard
  # Version:: 21
  # Last Update:: 2009-11-13 18:55:44 UTC
  # Status:: Validation Pending


  def search_field(name, field, val=nil)
    type = @model::FIELDS[field]
    case type
    when :string, :text, :integer, :float, :color, :binary
      text_field_tag(name, val)
    when :boolean
      select_tag(name, options_for_select([['', ''], [_("true"), 'true'], [_("false"), 'false']], val))
    when :date
      select_date(		val ? Date.parse(val) : nil,		:prefix => name)
    when :datetime
      select_datetime(	val ? DateTime.parse(val) : nil,	:prefix => name)
    when :time
      select_time(		val ? Time.parse(val) : nil,		:prefix => name)
    when :static_list
      select_tag(name, options_for_select(@model.new.send("#{field}__potential_values")))
    when :bt_assoc, :hm_assoc, :habtm_assoc, :ho_assoc
      values = @model.new.send("#{field}__potential_values").collect{|e| [e.disp_name, e.id]}
      select_tag(name, options_for_select([['', '']] + values, val), :multiple => true)
    else
      text_field_tag(name, val)
    end
  end

end
